#!/bin/bash
# Script Name: batchProcessing-0x02
# Description: Fetch Pok√©mon data from the PokeAPI with retry logic and error handling.

# List of Pok√©mon names (you can edit or load from a file)
POKEMONS=("bulbasaur" "charmander" "squirtle" "pikachu" "invalidPokemon")

# Base URL
API_URL="https://pokeapi.co/api/v2/pokemon"

# Directory to store JSON files
OUTPUT_DIR="./pokemon_data"
mkdir -p "$OUTPUT_DIR"

# Log file for failed requests
ERROR_LOG="error_log.txt"
> "$ERROR_LOG"

# Function to fetch Pok√©mon data with retry logic
fetch_pokemon() {
    local name=$1
    local retries=3
    local count=1
    local success=false

    while [ $count -le $retries ]; do
        echo "Fetching data for $name (Attempt $count)..."
        response=$(curl -s -o "$OUTPUT_DIR/$name.json" -w "%{http_code}" "$API_URL/$name")

        if [ "$response" -eq 200 ]; then
            echo "‚úÖ Successfully fetched data for $name"
            success=true
            break
        else
            echo "‚ö†Ô∏è  Attempt $count failed for $name (HTTP $response)"
            ((count++))
            sleep 2  # wait before retrying
        fi
    done

    if [ "$success" = false ]; then
        echo "‚ùå Failed to fetch data for $name after $retries attempts" | tee -a "$ERROR_LOG"
        rm -f "$OUTPUT_DIR/$name.json"  # delete incomplete file
    fi
}

# Loop through each Pok√©mon
for pokemon in "${POKEMONS[@]}"; do
    fetch_pokemon "$pokemon"
done

echo
echo "‚úÖ Data fetching complete!"
echo "üìÅ JSON files stored in: $OUTPUT_DIR"
echo "ü™∂ Errors logged in: $ERROR_LOG"
